Problem Description
A lucky number is a number that has exactly 2 distinct prime divisors.
You are given a number A, and you need to determine the count of lucky numbers between the range 1 to A (both inclusive).
Problem Constraints

1 <= A <= 50000
Input Format
The first and only argument is an integer A.

Output Format
Return an integer i.e the count of lucky numbers between 1 and A, both inclusive.
Example Input

Input 1:

 A = 8
Input 2:

 A = 12


Example Output

Output 1:

 1
Output 2:

 3


Example Explanation

Explanation 1:

 Between [1, 8] there is only 1 lucky number i.e 6.
 6 has 2 distinct prime factors i.e 2 and 3.
Explanation 2:

 Between [1, 12] there are 3 lucky number: 6, 10 and 12.

public class Solution {
    public int solve(int A) {
        if (A < 6) {
            return 0;  // No numbers with exactly two distinct prime divisors if A < 6
        }
        
        // Array to store the number of distinct prime divisors for each number
        int[] primeDivisorsCount = new int[A + 1];
        
        // Sieve of Eratosthenes to count distinct prime divisors
        for (int i = 2; i <= A; i++) {
            if (primeDivisorsCount[i] == 0) {  // i is a prime
                for (int j = i; j <= A; j += i) {
                    primeDivisorsCount[j]++;  // Increase the count of prime divisors
                }
            }
        }
        
        // Count how many numbers have exactly 2 distinct prime divisors
        int luckyNumberCount = 0;
        for (int i = 2; i <= A; i++) {
            if (primeDivisorsCount[i] == 2) {
                luckyNumberCount++;
            }
        }
        
        return luckyNumberCount;
    }
}
